{"ast":null,"code":"var _jsxFileName = \"/Users/redflash/Desktop/Strypess JS task/strypes-calendar/src/Components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchEvents } from '../Redux/calendarActions';\nimport '../Assets/Css/Calendar.css';\n\n// Function to get the day of the week, we going to use to in order to have right name of the days\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getFirstDayOfWeek = date => {\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  return firstDayOfMonth.getDay(); // 0 for Sunday, 1 for Monday, etc.\n};\n\n// Function to generate an array of day names starting with the first day of the week\nconst generateOrderedDayNames = firstDayOfWeek => {\n  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return [...dayNames.slice(firstDayOfWeek), ...dayNames.slice(0, firstDayOfWeek)];\n};\n// Function to abbreviate day names (typically we will use them for mobile view..)\nconst abbreviateDayName = fullDayName => {\n  const abbreviatedNames = {\n    Sunday: 'Sun',\n    Monday: 'Mon',\n    Tuesday: 'Tue',\n    Wednesday: 'Wed',\n    Thursday: 'Thu',\n    Friday: 'Fri',\n    Saturday: 'Sat'\n  };\n  return abbreviatedNames[fullDayName] || fullDayName;\n};\nconst Calendar = () => {\n  _s();\n  const currentDate = new Date();\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n  const firstDayOfWeek = getFirstDayOfWeek(firstDayOfMonth);\n  const orderedDayNames = generateOrderedDayNames(firstDayOfWeek);\n  const dispatch = useDispatch();\n  const events = useSelector(state => state.calendar.events);\n  const [isPopUpOpen, setPopUpOpen] = useState(false);\n  const [selectedDateEvents, setSelectedDateEvents] = useState([]);\n  const [popupPosition, setPopupPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  useEffect(() => {\n    dispatch(fetchEvents());\n  }, [dispatch]);\n\n  // Function to render events for a specific date\n  const renderEvents = date => {\n    const dateKey = date.toISOString().split('T')[0];\n    const dateEvents = events[dateKey] || [];\n    const dateEvent = events;\n    return dateEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event\",\n      onClick: e => {\n        // for(let i = 0; i < dateEvents.length; i++){\n        //   console.log(dateEvents[i]);\n        // }\n        setSelectedDateEvents(dateEvents);\n        const dateCell = e.currentTarget.getBoundingClientRect();\n        setPopupPosition({\n          bottom: dateCell.bottom,\n          left: dateCell.left\n        });\n        setPopUpOpen(true);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-title\",\n        children: event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-time\",\n        children: event.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Function to render a single date cell\n  const renderDateCell = date => {\n    // const currentDate = new Date();\n    const isCurrentDay = date.getDate() === currentDate.getDate() && date.getMonth() === currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear();\n    // Debugging the event day\n    const previousDay = new Date(date);\n    previousDay.setDate(date.getDate() + 1);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `date-cell ${isCurrentDay ? 'current-day' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date\",\n        children: date.getDate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), renderEvents(previousDay)]\n    }, date.toISOString(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to render the entire month\n  const renderMonth = () => {\n    // const currentDate = new Date();\n    // const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const weeks = [];\n    let currentDay = new Date(firstDayOfMonth);\n    // Fulfill the days in the calendar\n    while (currentDay <= lastDayOfMonth) {\n      const week = [];\n      for (let i = 0; i < 7; i++) {\n        const dateToRender = new Date(currentDay);\n        const dateKey = dateToRender.toISOString().split('T')[0];\n        const hasEvents = events[dateKey] && events[dateKey].length > 0;\n        // To be calendar for only 1 month we will use only the days within it.\n        // Check if the day is within the current month\n        if (dateToRender.getMonth() === currentDate.getMonth()) {\n          week.push(renderDateCell(dateToRender, hasEvents));\n        } else {\n          // If the day is outside the current month, render an empty cell\n          week.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-cell empty-cell\"\n          }, dateToRender.toISOString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this));\n        }\n        currentDay.setDate(currentDay.getDate() + 1);\n      }\n      weeks.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week\",\n        children: week\n      }, currentDay.toISOString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this));\n    }\n    return weeks;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Strypes Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days-of-week\",\n      children: orderedDayNames.map(dayName => /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-abbreviated-name\": abbreviateDayName(dayName),\n        children: dayName\n      }, dayName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), renderMonth(), isPopUpOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      style: {\n        top: popupPosition.bottom,\n        left: popupPosition.left - 50\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"triangle-up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-close-button\",\n          onClick: () => setPopUpOpen(false),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), selectedDateEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: event.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time: \", event.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-description\",\n            children: event.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"1IeFXJa4CSrhuSdvN6Y/e8o8JI8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchEvents","jsxDEV","_jsxDEV","getFirstDayOfWeek","date","firstDayOfMonth","Date","getFullYear","getMonth","getDay","generateOrderedDayNames","firstDayOfWeek","dayNames","slice","abbreviateDayName","fullDayName","abbreviatedNames","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Calendar","_s","currentDate","orderedDayNames","dispatch","events","state","calendar","isPopUpOpen","setPopUpOpen","selectedDateEvents","setSelectedDateEvents","popupPosition","setPopupPosition","top","left","renderEvents","dateKey","toISOString","split","dateEvents","dateEvent","map","event","index","className","onClick","e","dateCell","currentTarget","getBoundingClientRect","bottom","children","title","fileName","_jsxFileName","lineNumber","columnNumber","time","renderDateCell","isCurrentDay","getDate","previousDay","setDate","renderMonth","lastDayOfMonth","weeks","currentDay","week","i","dateToRender","hasEvents","length","push","toLocaleDateString","year","month","dayName","style","class","description","_c","$RefreshReg$"],"sources":["/Users/redflash/Desktop/Strypess JS task/strypes-calendar/src/Components/calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchEvents } from '../Redux/calendarActions';\nimport '../Assets/Css/Calendar.css';\n\n// Function to get the day of the week, we going to use to in order to have right name of the days\nconst getFirstDayOfWeek = (date) => {\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  return firstDayOfMonth.getDay(); // 0 for Sunday, 1 for Monday, etc.\n};\n\n// Function to generate an array of day names starting with the first day of the week\nconst generateOrderedDayNames = (firstDayOfWeek) => {\n  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return [...dayNames.slice(firstDayOfWeek), ...dayNames.slice(0, firstDayOfWeek)];\n};\n// Function to abbreviate day names (typically we will use them for mobile view..)\nconst abbreviateDayName = (fullDayName) => {\n  const abbreviatedNames = {\n    Sunday: 'Sun',\n    Monday: 'Mon',\n    Tuesday: 'Tue',\n    Wednesday: 'Wed',\n    Thursday: 'Thu',\n    Friday: 'Fri',\n    Saturday: 'Sat',\n  };\n  return abbreviatedNames[fullDayName] || fullDayName;\n};\n\nconst Calendar = () => {\n  const currentDate = new Date();\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n  const firstDayOfWeek = getFirstDayOfWeek(firstDayOfMonth);\n  const orderedDayNames = generateOrderedDayNames(firstDayOfWeek);\n  const dispatch = useDispatch();\n  const events = useSelector((state) => state.calendar.events);\n  const [isPopUpOpen, setPopUpOpen] = useState(false);\n  const [selectedDateEvents, setSelectedDateEvents] = useState([]);\n  const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });\n\n  useEffect(() => {\n    dispatch(fetchEvents());\n  }, [dispatch]);\n\n  // Function to render events for a specific date\n  const renderEvents = (date) => {\n    const dateKey = date.toISOString().split('T')[0];\n    const dateEvents = events[dateKey] || [];\n    const dateEvent = events\n    return dateEvents.map((event, index) => (\n      <div\n        key={index}\n        className=\"event\"\n        onClick={(e) => {\n          // for(let i = 0; i < dateEvents.length; i++){\n          //   console.log(dateEvents[i]);\n          // }\n          setSelectedDateEvents(dateEvents);\n\n          const dateCell = e.currentTarget.getBoundingClientRect();\n          setPopupPosition({\n            bottom: dateCell.bottom,\n            left: dateCell.left,\n          });\n          setPopUpOpen(true);\n        }}\n      >\n        <div className=\"event-title\">{event.title}</div>\n        <div className=\"event-time\">{event.time}</div>\n      </div>\n    ));\n  };\n\n  // Function to render a single date cell\n  const renderDateCell = (date) => {\n    // const currentDate = new Date();\n    const isCurrentDay =\n      date.getDate() === currentDate.getDate() &&\n      date.getMonth() === currentDate.getMonth() &&\n      date.getFullYear() === currentDate.getFullYear();\n    // Debugging the event day\n    const previousDay = new Date(date);\n    previousDay.setDate(date.getDate() + 1);\n\n    return (\n      <div\n        key={date.toISOString()}\n        className={`date-cell ${isCurrentDay ? 'current-day' : ''}`}\n      >\n        <div className=\"date\">{date.getDate()}</div>\n        {/* Rendering 1 day backwards to have the correct dates of the events :/ */}\n        {renderEvents(previousDay)}\n      </div>\n    );\n  };\n\n  // Function to render the entire month\n  const renderMonth = () => {\n    // const currentDate = new Date();\n    // const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const weeks = [];\n    let currentDay = new Date(firstDayOfMonth);\n    // Fulfill the days in the calendar\n    while (currentDay <= lastDayOfMonth) {\n      const week = [];\n      for (let i = 0; i < 7; i++) {\n        const dateToRender = new Date(currentDay);\n        const dateKey = dateToRender.toISOString().split('T')[0];\n        const hasEvents = events[dateKey] && events[dateKey].length > 0;\n        // To be calendar for only 1 month we will use only the days within it.\n        // Check if the day is within the current month\n        if (dateToRender.getMonth() === currentDate.getMonth()) {\n          week.push(renderDateCell(dateToRender, hasEvents));\n        } else {\n          // If the day is outside the current month, render an empty cell\n          week.push(\n            <div\n              key={dateToRender.toISOString()}\n              className=\"date-cell empty-cell\"\n            >\n            </div>\n          );\n        }\n\n        currentDay.setDate(currentDay.getDate() + 1);\n      }\n      weeks.push(\n        <div key={currentDay.toISOString()} className=\"week\">\n          {week}\n        </div>\n      );\n    }\n    return weeks;\n  };\n\n  return (\n    <div className=\"calendar\">\n\n      <h1>Strypes Calendar</h1>\n      <div className=\"header\">\n        {/* To get the correct month/year! */}\n        {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long' })}\n      </div>\n      <div className=\"days-of-week\">\n        {orderedDayNames.map((dayName) => (\n          <div key={dayName} data-abbreviated-name={abbreviateDayName(dayName)}>\n            {dayName}\n          </div>\n        ))}\n      </div>\n\n      {renderMonth()}\n      {isPopUpOpen && (\n        \n        <div className=\"popup\" style={{ top: popupPosition.bottom, left: popupPosition.left - 50 }}>\n          \n          <div class=\"triangle-up\"></div>\n\n          <div className=\"popup-content\">\n            <button className=\"popup-close-button\" onClick={() => setPopUpOpen(false)}>\n              X\n            </button>\n            \n            {selectedDateEvents.map((event, index) => (\n              <div key={index} className=\"event-detail\">\n                <h4>{event.title}</h4>\n                <p>Time: {event.time}</p>\n                <div className=\"event-description\">{event.description}</div>\n              </div>\n            ))}\n            \n          </div>\n        </div>\n        \n      )}\n    </div>\n  );\n};\n\nexport default Calendar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}