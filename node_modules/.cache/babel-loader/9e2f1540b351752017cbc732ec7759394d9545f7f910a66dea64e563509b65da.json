{"ast":null,"code":"var _jsxFileName = \"/Users/redflash/Desktop/Strypess JS task/strypes-calendar/src/Components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchEvents } from '../Redux/calendarActions';\nimport '../Assets/Css/Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const dispatch = useDispatch();\n  const events = useSelector(state => state.calendar.events);\n  useEffect(() => {\n    dispatch(fetchEvents());\n  }, [dispatch]);\n\n  // Function to render events for a specific date\n  const renderEvents = date => {\n    const dateKey = date.toISOString().split('T')[0];\n    const dateEvents = events[dateKey] || [];\n    return dateEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-title\",\n        children: event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-time\",\n        children: event.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Function to render a single date cell\n  const renderDateCell = date => {\n    const currentDate = new Date();\n    const isCurrentDay = date.getDate() === currentDate.getDate() && date.getMonth() === currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `date-cell ${isCurrentDay ? 'current-day' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date\",\n        children: date.getDate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), renderEvents(date)]\n    }, date.toISOString(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to render a week\n  const renderWeek = (startDate, hasEvents) => {\n    const week = [];\n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(startDate);\n      currentDate.setDate(startDate.getDate() + i);\n      week.push(renderDateCell(currentDate));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `week ${hasEvents ? 'has-events' : ''}`,\n      onClick: () => handleWeekClick(startDate),\n      children: week\n    }, startDate.toISOString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to render the entire month\n  const renderMonth = () => {\n    const currentDate = new Date();\n    const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const weeks = [];\n    let currentDay = new Date(firstDayOfMonth);\n    while (currentDay <= lastDayOfMonth) {\n      const week = [];\n      for (let i = 0; i < 7; i++) {\n        if (currentDay <= lastDayOfMonth) {\n          const dateKey = currentDay.toISOString().split('T')[0];\n          const hasEvents = events[dateKey] && events[dateKey].length > 0;\n          week.push(renderDateCell(currentDay, hasEvents));\n          currentDay.setDate(currentDay.getDate() + 1);\n        } else {\n          // If we've reached the end of the month, push empty date cells\n          week.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-cell empty\"\n          }, `empty-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this));\n        }\n      }\n      weeks.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week\",\n        children: week\n      }, currentDay.toISOString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this));\n    }\n    return weeks;\n  };\n\n  // State to manage the selected week's event details\n  const [selectedWeekEvents, setSelectedWeekEvents] = useState([]);\n\n  // Function to handle week click and display event details\n  const handleWeekClick = startDate => {\n    const dateKey = startDate.toISOString().split('T')[0];\n    setSelectedWeekEvents(events[dateKey] || []);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: \"August 2023\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days-of-week\",\n      children: [...Array(7)].map((_, index) => {\n        const dayIndex = (index + firstDayOfWeek) % 7;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayIndex]\n        }, dayIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), renderMonth(), renderMonth(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-details\",\n      children: selectedWeekEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-detail\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-title\",\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-time\",\n          children: event.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"vIS7k8ECIxtZWKh5BKQS6uxXTtw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchEvents","jsxDEV","_jsxDEV","Calendar","_s","dispatch","events","state","calendar","renderEvents","date","dateKey","toISOString","split","dateEvents","map","event","index","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","time","renderDateCell","currentDate","Date","isCurrentDay","getDate","getMonth","getFullYear","renderWeek","startDate","hasEvents","week","i","setDate","push","onClick","handleWeekClick","renderMonth","firstDayOfMonth","lastDayOfMonth","weeks","currentDay","length","selectedWeekEvents","setSelectedWeekEvents","Array","_","dayIndex","firstDayOfWeek","_c","$RefreshReg$"],"sources":["/Users/redflash/Desktop/Strypess JS task/strypes-calendar/src/Components/calendar.js"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchEvents } from '../Redux/calendarActions';\nimport '../Assets/Css/Calendar.css';\n\nconst Calendar = () => {\n  const dispatch = useDispatch();\n  const events = useSelector((state) => state.calendar.events);\n\n  useEffect(() => {\n    dispatch(fetchEvents());\n  }, [dispatch]);\n\n  // Function to render events for a specific date\n  const renderEvents = (date) => {\n    const dateKey = date.toISOString().split('T')[0];\n    const dateEvents = events[dateKey] || [];\n\n    return dateEvents.map((event, index) => (\n      <div key={index} className=\"event\">\n        <div className=\"event-title\">{event.title}</div>\n        <div className=\"event-time\">{event.time}</div>\n      </div>\n    ));\n  };\n\n  // Function to render a single date cell\n  const renderDateCell = (date) => {\n    const currentDate = new Date();\n    const isCurrentDay =\n      date.getDate() === currentDate.getDate() &&\n      date.getMonth() === currentDate.getMonth() &&\n      date.getFullYear() === currentDate.getFullYear();\n  \n    return (\n      <div\n        key={date.toISOString()}\n        className={`date-cell ${isCurrentDay ? 'current-day' : ''}`}\n      >\n        <div className=\"date\">{date.getDate()}</div>\n        {renderEvents(date)}\n      </div>\n    );\n  };  \n\n  // Function to render a week\n  const renderWeek = (startDate, hasEvents) => {\n    const week = [];\n  \n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(startDate);\n      currentDate.setDate(startDate.getDate() + i);\n      week.push(renderDateCell(currentDate));\n    }\n  \n    return (\n      <div\n        key={startDate.toISOString()}\n        className={`week ${hasEvents ? 'has-events' : ''}`}\n        onClick={() => handleWeekClick(startDate)}\n      >\n        {week}\n      </div>\n    );\n  };\n\n  // Function to render the entire month\n  const renderMonth = () => {\n    const currentDate = new Date();\n    const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const weeks = [];\n  \n    let currentDay = new Date(firstDayOfMonth);\n  \n    while (currentDay <= lastDayOfMonth) {\n      const week = [];\n  \n      for (let i = 0; i < 7; i++) {\n        if (currentDay <= lastDayOfMonth) {\n          const dateKey = currentDay.toISOString().split('T')[0];\n          const hasEvents = events[dateKey] && events[dateKey].length > 0;\n          week.push(renderDateCell(currentDay, hasEvents));\n          currentDay.setDate(currentDay.getDate() + 1);\n        } else {\n          // If we've reached the end of the month, push empty date cells\n          week.push(<div key={`empty-${i}`} className=\"date-cell empty\"></div>);\n        }\n      }\n  \n      weeks.push(\n        <div key={currentDay.toISOString()} className=\"week\">\n          {week}\n        </div>\n      );\n    }\n  \n    return weeks;\n  };\n\n  // State to manage the selected week's event details\n  const [selectedWeekEvents, setSelectedWeekEvents] = useState([]);\n\n  // Function to handle week click and display event details\n  const handleWeekClick = (startDate) => {\n    const dateKey = startDate.toISOString().split('T')[0];\n    setSelectedWeekEvents(events[dateKey] || []);\n  };\n\n  return (\n    <div className=\"calendar\">\n      <h1>Calendar</h1>\n      <div className=\"header\">August 2023</div>\n      <div className=\"days-of-week\">\n        {[...Array(7)].map((_, index) => {\n          const dayIndex = (index + firstDayOfWeek) % 7;\n          return (\n            <div key={dayIndex}>\n              {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayIndex]}\n            </div>\n          );\n        })}\n      </div>\n      {renderMonth()}\n      {renderMonth()}\n      <div className=\"event-details\">\n        {selectedWeekEvents.map((event, index) => (\n          <div key={index} className=\"event-detail\">\n            <div className=\"event-title\">{event.title}</div>\n            <div className=\"event-time\">{event.time}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}